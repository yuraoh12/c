// 문제 - 자동차 객체마다 서로 다른 최고속력를 가지도록 해주세요. 그리고 자동차가 각자의 속력으로 달릴 수 있는 달리다 함수를 만들어서 각각의 자동차를 달리게 해주세요
#include <iostream>

using namespace std;

// struct VS class 
// 접근제어자의(access modifier) 유무 -> 캡슐화를 위해 필요한 개념

// 객체지향 3요소 -> 캡슐화(encapsulation)

// 어떤 코드 안에서 데이터의 올바름을 내가 보장할 수 있을까? 답은 아니오다.
// 왜냐하면
// 1. 올바른 데이터를 기억하더라도 내가 까먹을 수 있음. 
// 2. 대규모 소프트웨어에서는 협업이 필수이므로 남이 짠 코드 안에서 올바른 데이터를 내가 파악할 수 없음.

// 결론적으로 캡슐화 하는 이유?
//   - 객체 내부의 데이터가 올바르게 유지되게 하기 위함(코드 제작자가 아닌 외부의 개입으로 데이터가 망가지지 않도록 하기 위함)
//   - 외부에 정보를 은닉하기 위함.(외부에서 데이터를 사용하는데 복잡한 내용을 알 필요가 없어야 함)

class Car {
private: // 접근제어자. -> public, private, protected
	int velocity = 100; // 음수가 되면 안됨.

public:
	void run() {
		cout << "자동차가 " << velocity << "km 로 달립니다" << endl;
	}
};


int main() {

	// 자동차가 100km 로 달립니다
	Car c1;
	//c1.velocity = -200; 

	c1.run();

	// 자동차가 140km 로 달립니다
    // Car c2 = { 140 };

	//c2.run();
}
